apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    compileOptions {
        sourceCompatibility rootProject.ext.android.sourceCompatibility
        targetCompatibility rootProject.ext.android.targetCompatibility
    }

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.libs["libuvccamera-versionCode"]
        versionName rootProject.ext.libs["libuvccamera-versionName"]

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
        ndk {
            // armeabi armeabi-v7a x86 arm64-v8a x86_64
            abiFilters "armeabi-v7a", "x86"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
//        cmake {
//            path "CMakeLists.txt"
//        }
        ndkBuild {
            path "src/main/jni/Android.mk"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation rootProject.ext.dependencies["support-annotations"]
    implementation rootProject.ext.dependencies["appcompat-v7"]
    //
    testImplementation rootProject.ext.dependencies["junit"]
}

//maven仓库
apply plugin: "maven"

uploadArchives {
    repositories.mavenDeployer {
        repository(url: uri(project.rootProject.file('repository').absolutePath))

        pom.project {
            groupId rootProject.ext.libs["libuvccamera-groupId"]
            artifactId rootProject.ext.libs["libuvccamera-artifactId"]
            version rootProject.ext.libs["libuvccamera-version"]
        }
    }
}

task androidJavadocs(type: Javadoc) {
    options.encoding = "utf-8"
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = "javadoc"
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = "sources"
    from android.sourceSets.main.java.sourceFiles
}

artifacts {
//    archives androidJavadocsJar
//    archives androidSourcesJar
}